{"ast":null,"code":"var _jsxFileName = \"/Users/ravigoyal/Desktop/live project/project/src/project/test.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import ReactDOM from 'react-dom';\n// import ReactPaginate from 'react-paginate';\n\n// // Example items, to simulate fetching from another resources.\n// const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n// export default function Items({ currentItems }) {\n//   return (\n//     <>\n//       {currentItems &&\n//         currentItems.map((item) => (\n//           <div>\n//             <h3>Item #{item}</h3>  \n//           </div>\n//         ))}\n//     </>\n//   );\n// }\n\n// function PaginatedItems({ itemsPerPage }) {\n//   // Here we use item offsets; we could also use page offsets\n//   // following the API or data you're working with.\n//   const [itemOffset, setItemOffset] = useState(0);\n\n//   // Simulate fetching items from another resources.\n//   // (This could be items from props; or items loaded in a local state\n//   // from an API endpoint with useEffect and useState)\n//   const endOffset = itemOffset + itemsPerPage;\n//   console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n//   const currentItems = items.slice(itemOffset, endOffset);\n//   const pageCount = Math.ceil(items.length / itemsPerPage);\n\n//   // Invoke when user click to request another page.\n//   const handlePageClick = (event) => {\n//     const newOffset = (event.selected * itemsPerPage) % items.length;\n//     console.log(\n//       `User requested page number ${event.selected}, which is offset ${newOffset}`\n//     );\n//     setItemOffset(newOffset);\n//   };\n\n//   return (\n//     <>\n//       <Items currentItems={currentItems} />\n//       <ReactPaginate\n//         breakLabel=\"...\"\n//         nextLabel=\"next >\"\n//         onPageChange={handlePageClick}\n//         pageRangeDisplayed={5}\n//         pageCount={pageCount}\n//         previousLabel=\"< previous\"\n//         renderOnZeroPageCount={null}\n//       />\n//     </>\n//   );\n// }\n\n// // Add a <div id=\"container\"> to your HTML to see the component rendered.\n// // ReactDOM.render(\n// //   <PaginatedItems itemsPerPage={4} />,\n// //   document.getElementById('container')\n// // );\nimport React from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\nimport gsap from \"https://esm.sh/gsap\";\nimport { useGSAP } from \"https://esm.sh/@gsap/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useRef\n} = React;\nfunction Test() {\n  _s();\n  const container = useRef();\n  const circle = useRef();\n  useGSAP(context => {\n    let mm = gsap.matchMedia();\n    mm.add(\"(min-width: 800px)\", () => {\n      // use selectors...\n      gsap.to(\".box\", {\n        rotation: \"+=360\",\n        duration: 3\n      });\n\n      // or refs...\n      gsap.to(circle.current, {\n        rotation: \"-=360\"\n      });\n    });\n    console.log(context);\n  }, {\n    scope: container\n  }); // <-- scope for selector text (optional)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: container,\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box gradient-blue\",\n        children: \"selector\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circle gradient-green\",\n        ref: circle,\n        children: \"Ref\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box gradient-blue\",\n      children: \"selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(Test, \"sFSUsHsQSTdHB1l46576p7DZ3+I=\", false, function () {\n  return [useGSAP];\n});\n_c = Test;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 106,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","ReactDOM","gsap","useGSAP","jsxDEV","_jsxDEV","useRef","Test","_s","container","circle","context","mm","matchMedia","add","to","rotation","duration","current","console","log","scope","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","root","createRoot","document","getElementById","render","$RefreshReg$"],"sources":["/Users/ravigoyal/Desktop/live project/project/src/project/test.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import ReactDOM from 'react-dom';\n// import ReactPaginate from 'react-paginate';\n\n// // Example items, to simulate fetching from another resources.\n// const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n// export default function Items({ currentItems }) {\n//   return (\n//     <>\n//       {currentItems &&\n//         currentItems.map((item) => (\n//           <div>\n//             <h3>Item #{item}</h3>  \n//           </div>\n//         ))}\n//     </>\n//   );\n// }\n\n// function PaginatedItems({ itemsPerPage }) {\n//   // Here we use item offsets; we could also use page offsets\n//   // following the API or data you're working with.\n//   const [itemOffset, setItemOffset] = useState(0);\n\n//   // Simulate fetching items from another resources.\n//   // (This could be items from props; or items loaded in a local state\n//   // from an API endpoint with useEffect and useState)\n//   const endOffset = itemOffset + itemsPerPage;\n//   console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n//   const currentItems = items.slice(itemOffset, endOffset);\n//   const pageCount = Math.ceil(items.length / itemsPerPage);\n\n//   // Invoke when user click to request another page.\n//   const handlePageClick = (event) => {\n//     const newOffset = (event.selected * itemsPerPage) % items.length;\n//     console.log(\n//       `User requested page number ${event.selected}, which is offset ${newOffset}`\n//     );\n//     setItemOffset(newOffset);\n//   };\n\n//   return (\n//     <>\n//       <Items currentItems={currentItems} />\n//       <ReactPaginate\n//         breakLabel=\"...\"\n//         nextLabel=\"next >\"\n//         onPageChange={handlePageClick}\n//         pageRangeDisplayed={5}\n//         pageCount={pageCount}\n//         previousLabel=\"< previous\"\n//         renderOnZeroPageCount={null}\n//       />\n//     </>\n//   );\n// }\n\n// // Add a <div id=\"container\"> to your HTML to see the component rendered.\n// // ReactDOM.render(\n// //   <PaginatedItems itemsPerPage={4} />,\n// //   document.getElementById('container')\n// // );\nimport React from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\n\nimport gsap from \"https://esm.sh/gsap\";\nimport { useGSAP } from \"https://esm.sh/@gsap/react\";\n\nconst { useRef } = React;\n\nfunction Test() {\n  const container = useRef();\n  const circle = useRef();\n\n  useGSAP((context) => {\n    let mm = gsap.matchMedia();\n\n    mm.add(\"(min-width: 800px)\", () => {\n        // use selectors...\n      gsap.to(\".box\", { rotation: \"+=360\", duration: 3 });\n      \n      // or refs...\n      gsap.to(circle.current, { rotation: \"-=360\" });\n    });\n\n    console.log(context);\n    \n  }, { scope: container }); // <-- scope for selector text (optional)\n\n  return (\n    \n    <div className=\"App\">\n      <div ref={container} className=\"container\">\n        <div className=\"box gradient-blue\">selector</div>\n        <div className=\"circle gradient-green\" ref={circle}>\n          Ref\n        </div>\n      </div>\n      <div className=\"box gradient-blue\">selector</div>\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Test />);"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,sBAAsB;AACxC,OAAOC,QAAQ,MAAM,0BAA0B;AAE/C,OAAOC,IAAI,MAAM,qBAAqB;AACtC,SAASC,OAAO,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAM;EAAEC;AAAO,CAAC,GAAGN,KAAK;AAExB,SAASO,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,SAAS,GAAGH,MAAM,CAAC,CAAC;EAC1B,MAAMI,MAAM,GAAGJ,MAAM,CAAC,CAAC;EAEvBH,OAAO,CAAEQ,OAAO,IAAK;IACnB,IAAIC,EAAE,GAAGV,IAAI,CAACW,UAAU,CAAC,CAAC;IAE1BD,EAAE,CAACE,GAAG,CAAC,oBAAoB,EAAE,MAAM;MAC/B;MACFZ,IAAI,CAACa,EAAE,CAAC,MAAM,EAAE;QAAEC,QAAQ,EAAE,OAAO;QAAEC,QAAQ,EAAE;MAAE,CAAC,CAAC;;MAEnD;MACAf,IAAI,CAACa,EAAE,CAACL,MAAM,CAACQ,OAAO,EAAE;QAAEF,QAAQ,EAAE;MAAQ,CAAC,CAAC;IAChD,CAAC,CAAC;IAEFG,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EAEtB,CAAC,EAAE;IAAEU,KAAK,EAAEZ;EAAU,CAAC,CAAC,CAAC,CAAC;;EAE1B,oBAEEJ,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlB,OAAA;MAAKmB,GAAG,EAAEf,SAAU;MAACa,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxClB,OAAA;QAAKiB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACjDvB,OAAA;QAAKiB,SAAS,EAAC,uBAAuB;QAACE,GAAG,EAAEd,MAAO;QAAAa,QAAA,EAAC;MAEpD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNvB,OAAA;MAAKiB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAACpB,EAAA,CA/BQD,IAAI;EAAA,QAIXJ,OAAO;AAAA;AAAA0B,EAAA,GAJAtB,IAAI;AAiCb,MAAMuB,IAAI,GAAG7B,QAAQ,CAAC8B,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eAAC7B,OAAA,CAACE,IAAI;EAAAkB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,CAAC;AAAC,IAAAC,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}