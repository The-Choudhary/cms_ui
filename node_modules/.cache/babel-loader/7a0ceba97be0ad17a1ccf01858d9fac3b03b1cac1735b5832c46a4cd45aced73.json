{"ast":null,"code":"var _jsxFileName = \"/Users/ravigoyal/Desktop/live project/project/src/project/test.js\",\n  _s = $RefreshSig$();\nimport ReactPaginate from \"https://cdn.skypack.dev/react-paginate@7.1.3\";\nimport React, { useEffect, useState } from \"https://cdn.skypack.dev/react@17.0.1\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom@17.0.1\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [...Array(33).keys()];\nfunction Items({\n  currentItems\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"items\",\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_c = Items;\nfunction PaginatedItems({\n  itemsPerPage\n}) {\n  _s();\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 3,\n      marginPagesDisplayed: 2,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      pageClassName: \"page-item\",\n      pageLinkClassName: \"page-link\",\n      previousClassName: \"page-item\",\n      previousLinkClassName: \"page-link\",\n      nextClassName: \"page-item\",\n      nextLinkClassName: \"page-link\",\n      breakLabel: \"...\",\n      breakClassName: \"page-item\",\n      breakLinkClassName: \"page-link\",\n      containerClassName: \"pagination\",\n      activeClassName: \"active\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// Add a <div id=\"container\"> to your HTML to see the componend rendered.\n_s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n_c2 = PaginatedItems;\nReactDOM.render( /*#__PURE__*/_jsxDEV(PaginatedItems, {\n  itemsPerPage: 4\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 74,\n  columnNumber: 3\n}, this), document.getElementById(\"container\"));\nvar _c, _c2;\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"names":["ReactPaginate","React","useEffect","useState","ReactDOM","jsxDEV","_jsxDEV","Fragment","_Fragment","items","Array","keys","Items","currentItems","className","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","PaginatedItems","itemsPerPage","_s","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected","nextLabel","onPageChange","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","_c2","render","document","getElementById","$RefreshReg$"],"sources":["/Users/ravigoyal/Desktop/live project/project/src/project/test.js"],"sourcesContent":["import ReactPaginate from \"https://cdn.skypack.dev/react-paginate@7.1.3\";\nimport React, {\n  useEffect,\n  useState\n} from \"https://cdn.skypack.dev/react@17.0.1\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom@17.0.1\";\n\nconst items = [...Array(33).keys()];\n\nfunction Items({ currentItems }) {\n  return (\n    <div className=\"items\">\n    {currentItems && currentItems.map((item) => (\n      <div>\n        <h3>Item #{item}</h3>\n      </div>\n    ))}\n      </div>\n  );\n}\n\nfunction PaginatedItems({ itemsPerPage }) {\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n      <Items currentItems={currentItems} />\n      <ReactPaginate\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={3}\n        marginPagesDisplayed={2}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        pageClassName=\"page-item\"\n        pageLinkClassName=\"page-link\"\n        previousClassName=\"page-item\"\n        previousLinkClassName=\"page-link\"\n        nextClassName=\"page-item\"\n        nextLinkClassName=\"page-link\"\n        breakLabel=\"...\"\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        containerClassName=\"pagination\"\n        activeClassName=\"active\"\n        renderOnZeroPageCount={null}\n      />\n    </>\n  );\n}\n\n// Add a <div id=\"container\"> to your HTML to see the componend rendered.\nReactDOM.render(\n  <PaginatedItems itemsPerPage={4} />,\n  document.getElementById(\"container\")\n);"],"mappings":";;AAAA,OAAOA,aAAa,MAAM,8CAA8C;AACxE,OAAOC,KAAK,IACVC,SAAS,EACTC,QAAQ,QACH,sCAAsC;AAC7C,OAAOC,QAAQ,MAAM,0CAA0C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhE,MAAMC,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;AAEnC,SAASC,KAAKA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAC/B,oBACEP,OAAA;IAAKQ,SAAS,EAAC,OAAO;IAAAC,QAAA,EACrBF,YAAY,IAAIA,YAAY,CAACG,GAAG,CAAEC,IAAI,iBACrCX,OAAA;MAAAS,QAAA,eACET,OAAA;QAAAS,QAAA,GAAI,QAAM,EAACE,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEZ;AAACC,EAAA,GAVQV,KAAK;AAYd,SAASW,cAAcA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACxC;EACA,MAAM,CAACZ,YAAY,EAAEa,eAAe,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EAC7C;EACA;EACA,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd;IACA,MAAM6B,SAAS,GAAGF,UAAU,GAAGL,YAAY;IAC3CQ,OAAO,CAACC,GAAG,CAAE,sBAAqBJ,UAAW,OAAME,SAAU,EAAC,CAAC;IAC/DL,eAAe,CAACjB,KAAK,CAACyB,KAAK,CAACL,UAAU,EAAEE,SAAS,CAAC,CAAC;IACnDH,YAAY,CAACO,IAAI,CAACC,IAAI,CAAC3B,KAAK,CAAC4B,MAAM,GAAGb,YAAY,CAAC,CAAC;EACtD,CAAC,EAAE,CAACK,UAAU,EAAEL,YAAY,CAAC,CAAC;;EAE9B;EACA,MAAMc,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,SAAS,GAAGD,KAAK,CAACE,QAAQ,GAAGjB,YAAY,GAAGf,KAAK,CAAC4B,MAAM;IAC9DL,OAAO,CAACC,GAAG,CAAE,8BAA6BM,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAAC,CAAC;IACzFV,aAAa,CAACU,SAAS,CAAC;EAC1B,CAAC;EAED,oBACElC,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBACET,OAAA,CAACM,KAAK;MAACC,YAAY,EAAEA;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCf,OAAA,CAACN,aAAa;MACZ0C,SAAS,EAAC,QAAQ;MAClBC,YAAY,EAAEL,eAAgB;MAC9BM,kBAAkB,EAAE,CAAE;MACtBC,oBAAoB,EAAE,CAAE;MACxBlB,SAAS,EAAEA,SAAU;MACrBmB,aAAa,EAAC,YAAY;MAC1BC,aAAa,EAAC,WAAW;MACzBC,iBAAiB,EAAC,WAAW;MAC7BC,iBAAiB,EAAC,WAAW;MAC7BC,qBAAqB,EAAC,WAAW;MACjCC,aAAa,EAAC,WAAW;MACzBC,iBAAiB,EAAC,WAAW;MAC7BC,UAAU,EAAC,KAAK;MAChBC,cAAc,EAAC,WAAW;MAC1BC,kBAAkB,EAAC,WAAW;MAC9BC,kBAAkB,EAAC,YAAY;MAC/BC,eAAe,EAAC,QAAQ;MACxBC,qBAAqB,EAAE;IAAK;MAAAxC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA,eACF,CAAC;AAEP;;AAEA;AAAAI,EAAA,CAlDSF,cAAc;AAAAoC,GAAA,GAAdpC,cAAc;AAmDvBnB,QAAQ,CAACwD,MAAM,eACbtD,OAAA,CAACiB,cAAc;EAACC,YAAY,EAAE;AAAE;EAAAN,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EACnCwC,QAAQ,CAACC,cAAc,CAAC,WAAW,CACrC,CAAC;AAAC,IAAAxC,EAAA,EAAAqC,GAAA;AAAAI,YAAA,CAAAzC,EAAA;AAAAyC,YAAA,CAAAJ,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}