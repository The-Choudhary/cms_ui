{"ast":null,"code":"var _jsxFileName = \"/Users/ravigoyal/Desktop/live project/project/src/project/test.js\";\n// import React, { useEffect, useState } from 'react';\n// import ReactDOM from 'react-dom';\n// import ReactPaginate from 'react-paginate';\n\n// // Example items, to simulate fetching from another resources.\n// const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n// export default function Items({ currentItems }) {\n//   return (\n//     <>\n//       {currentItems &&\n//         currentItems.map((item) => (\n//           <div>\n//             <h3>Item #{item}</h3>  \n//           </div>\n//         ))}\n//     </>\n//   );\n// }\n\n// function PaginatedItems({ itemsPerPage }) {\n//   // Here we use item offsets; we could also use page offsets\n//   // following the API or data you're working with.\n//   const [itemOffset, setItemOffset] = useState(0);\n\n//   // Simulate fetching items from another resources.\n//   // (This could be items from props; or items loaded in a local state\n//   // from an API endpoint with useEffect and useState)\n//   const endOffset = itemOffset + itemsPerPage;\n//   console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n//   const currentItems = items.slice(itemOffset, endOffset);\n//   const pageCount = Math.ceil(items.length / itemsPerPage);\n\n//   // Invoke when user click to request another page.\n//   const handlePageClick = (event) => {\n//     const newOffset = (event.selected * itemsPerPage) % items.length;\n//     console.log(\n//       `User requested page number ${event.selected}, which is offset ${newOffset}`\n//     );\n//     setItemOffset(newOffset);\n//   };\n\n//   return (\n//     <>\n//       <Items currentItems={currentItems} />\n//       <ReactPaginate\n//         breakLabel=\"...\"\n//         nextLabel=\"next >\"\n//         onPageChange={handlePageClick}\n//         pageRangeDisplayed={5}\n//         pageCount={pageCount}\n//         previousLabel=\"< previous\"\n//         renderOnZeroPageCount={null}\n//       />\n//     </>\n//   );\n// }\n\n// // Add a <div id=\"container\"> to your HTML to see the component rendered.\n// // ReactDOM.render(\n// //   <PaginatedItems itemsPerPage={4} />,\n// //   document.getElementById('container')\n// // );\nimport { useRef } from \"react\";\nimport gsap from \"gsap\";\nimport { useGSAP } from \"@gsap/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst container = useRef();\nuseGSAP(() => {\n  // gsap code here...\n  gsap.to(\".boox\", {\n    x: 360\n  }); // <-- automatically reverted\n}, {\n  scope: container\n}); // <-- scope is for selector text (optional)\n\nexport default function Test() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["useRef","gsap","useGSAP","jsxDEV","_jsxDEV","Fragment","_Fragment","container","to","x","scope","Test","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ravigoyal/Desktop/live project/project/src/project/test.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import ReactDOM from 'react-dom';\n// import ReactPaginate from 'react-paginate';\n\n// // Example items, to simulate fetching from another resources.\n// const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n// export default function Items({ currentItems }) {\n//   return (\n//     <>\n//       {currentItems &&\n//         currentItems.map((item) => (\n//           <div>\n//             <h3>Item #{item}</h3>  \n//           </div>\n//         ))}\n//     </>\n//   );\n// }\n\n// function PaginatedItems({ itemsPerPage }) {\n//   // Here we use item offsets; we could also use page offsets\n//   // following the API or data you're working with.\n//   const [itemOffset, setItemOffset] = useState(0);\n\n//   // Simulate fetching items from another resources.\n//   // (This could be items from props; or items loaded in a local state\n//   // from an API endpoint with useEffect and useState)\n//   const endOffset = itemOffset + itemsPerPage;\n//   console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n//   const currentItems = items.slice(itemOffset, endOffset);\n//   const pageCount = Math.ceil(items.length / itemsPerPage);\n\n//   // Invoke when user click to request another page.\n//   const handlePageClick = (event) => {\n//     const newOffset = (event.selected * itemsPerPage) % items.length;\n//     console.log(\n//       `User requested page number ${event.selected}, which is offset ${newOffset}`\n//     );\n//     setItemOffset(newOffset);\n//   };\n\n//   return (\n//     <>\n//       <Items currentItems={currentItems} />\n//       <ReactPaginate\n//         breakLabel=\"...\"\n//         nextLabel=\"next >\"\n//         onPageChange={handlePageClick}\n//         pageRangeDisplayed={5}\n//         pageCount={pageCount}\n//         previousLabel=\"< previous\"\n//         renderOnZeroPageCount={null}\n//       />\n//     </>\n//   );\n// }\n\n// // Add a <div id=\"container\"> to your HTML to see the component rendered.\n// // ReactDOM.render(\n// //   <PaginatedItems itemsPerPage={4} />,\n// //   document.getElementById('container')\n// // );\nimport { useRef } from \"react\";\nimport gsap from \"gsap\";\nimport { useGSAP } from \"@gsap/react\";\n\nconst container = useRef();\n\nuseGSAP(() => {\n  // gsap code here...\n  gsap.to(\".boox\", {x: 360}); // <-- automatically reverted\n\n}, { scope: container }); // <-- scope is for selector text (optional)\n\nexport default function Test(){\n  return(\n    <>\n    <div className=\"boox\">\n\n    </div>\n    </>\n  )\n}"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,OAAO,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,SAAS,GAAGP,MAAM,CAAC,CAAC;AAE1BE,OAAO,CAAC,MAAM;EACZ;EACAD,IAAI,CAACO,EAAE,CAAC,OAAO,EAAE;IAACC,CAAC,EAAE;EAAG,CAAC,CAAC,CAAC,CAAC;AAE9B,CAAC,EAAE;EAAEC,KAAK,EAAEH;AAAU,CAAC,CAAC,CAAC,CAAC;;AAE1B,eAAe,SAASI,IAAIA,CAAA,EAAE;EAC5B,oBACEP,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACAR,OAAA;MAAKS,SAAS,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEhB;EAAC,gBACJ,CAAC;AAEP;AAACC,EAAA,GARuBP,IAAI;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}